include: all_lint_rules.yaml
analyzer:
  exclude:
    # ignore warnings in files from json_serializable, built_value and most generators
    - '**/*.g.dart'
    # ignore warnings in files generated by Freezed specifically.
    - '**/*.freezed.dart'
    # ignore warnings in main.g.dart file
    - 'lib/main.g.dart'
  strong-mode:
    # Will become the default once non-nullable types land
    # https://github.com/dart-lang/sdk/issues/31410#issuecomment-510683629
    implicit-casts: false
    implicit-dynamic: false
  errors:
    # Otherwise cause the import of all_lint_rules to warn because of some rules conflicts.
    # We explicitly enabled even conflicting rules and are fixing the conflict
    # in this file
    included_file_warning: ignore

linter:
  rules:
    # Conflicts with `prefer_single_quotes`
    # Single quotes are easier to type and don't compromise on readability.
    # https://dart-lang.github.io/linter/lints/prefer_double_quotes.html
    prefer_double_quotes: false

    # Conflicts with `omit_local_variable_types` and other rules.
    # As per Dart guidelines, we want to avoid unnecessary types to make the code
    # more readable.
    # See https://dart.dev/guides/language/effective-dart/design#avoid-type-annotating-initialized-local-variables
    # http://dart-lang.github.io/linter/lints/always_specify_types.html
    always_specify_types: false

    # Incompatible with `prefer_final_locals`
    # Having immutable local variables makes larger functions more predictible
    # so we will use `prefer_final_locals` instead.
    # https://dart-lang.github.io/linter/lints/unnecessary_final.html
    unnecessary_final: false

    # While very useful for packages, it is too tiresome to apply for private projects.
    # Disabling it avoid redundant comments like:
    # // The counter
    # int count;
    # https://dart-lang.github.io/linter/lints/public_member_api_docs.html
    public_member_api_docs: false

    # Not quite suitable for Flutter, which may have a `build` method with a single
    # return, but that return is still complex enough that a "body" is worth it.
    # https://dart-lang.github.io/linter/lints/prefer_expression_function_bodies.html
    prefer_expression_function_bodies: false

    # It is important to know the type of parameter for your function or method.
    # https://dart-lang.github.io/linter/lints/avoid_types_on_closure_parameters.html
    avoid_types_on_closure_parameters: false

    # It is important to know the type of variables inside a function or method.
    # https://dart-lang.github.io/linter/lints/omit_local_variable_types.html
    omit_local_variable_types: false

    # Because some plugins like Mobx, makes use of functions by parameter and this rule conflicts with that.
    # https://dart-lang.github.io/linter/lints/unnecessary_lambdas.html
    unnecessary_lambdas: false

    # In addition to one rule, it conflicts with another,
    # it usually asks to be used in places where there is no need for spread
    # https://dart-lang.github.io/linter/lints/cascade_invocations.html
    # https://dart-lang.github.io/linter/lints/avoid_single_cascade_in_expression_statements.html
    cascade_invocations: false
    avoid_single_cascade_in_expression_statements: false

    # Too verbose for apps and bring very little value
    # https://dart-lang.github.io/linter/lints/diagnostic_describe_all_properties.html
    diagnostic_describe_all_properties: false

    # There are no strong arguments to enable this rule
    # because it is very strict. Catching anything is useful
    # and common even if not always the most correct thing to do.
    # http://dart-lang.github.io/linter/lints/avoid_catches_without_on_clauses.html
    avoid_catches_without_on_clauses: false

    # Dense code isn't necessarily better code
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/prefer_foreach.html
    prefer_foreach: false

    # In cases when you use a private constructors and need to make available
    # some value os this class (e.g., a get var/value)
    # Its necessary set the var/value as static
    # https://dart-lang.github.io/linter/lints/prefer_constructors_over_static_methods.html
    prefer_constructors_over_static_methods: false

    # Defining interfaces (abstract classes), with only one method, makes sense architecture wise
    # Discussion: https://github.com/passsy/dart-lint/issues/2
    #
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/one_member_abstracts.html
    one_member_abstracts: false

    # There is no argument which makes int literals better than double literals for doubles.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/prefer_int_literals.html
    prefer_int_literals: false

    # A leftover from dart1, should be deprecated
    # pedantic: disabled
    # - https://github.com/dart-lang/linter/issues/1401
    # http://dart-lang.github.io/linter/lints/avoid_as.html
    avoid_as: false
